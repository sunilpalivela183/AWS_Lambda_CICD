name: Deploy Lambda

on:
  push:
    branches:
      - main
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python and AWS CLI dependencies
        run: |
          sudo apt-get update
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python3.11 python3.11-venv python3-pip jq zip
          pip3 install --upgrade boto3 awscli

      - name: Set environment variables based on branch
        id: set-env-vars
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "API_KEY=prod_api_key" >> $GITHUB_ENV
            echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
          else
            echo "ENV=test" >> $GITHUB_ENV
            echo "API_KEY=test_api_key" >> $GITHUB_ENV
            echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
          fi

      - name: Package Lambda function
        run: |
          cd lambda_function
          python3.11 -m venv venv
          source venv/bin/activate
          mkdir package
          pip install --no-cache-dir -r requirements.txt -t package
          cp app.py package/
          cd package
          zip -r ../../lambda.zip .
          cd ../..

      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          FUNCTION_NAME="cicd_lambda_${{ github.ref_name }}"
          REGION="us-east-1"

          # Load environment variables
          source $GITHUB_ENV

          # Create environment variables JSON for Lambda
          jq -n \
            --arg ENV "$ENV" \
            --arg API_KEY "$API_KEY" \
            --arg LOG_LEVEL "$LOG_LEVEL" \
            '{Variables: {ENV: $ENV, API_KEY: $API_KEY, LOG_LEVEL: $LOG_LEVEL}}' > env_vars.json

          echo "Environment variables JSON:"
          cat env_vars.json

          # Deploy or update the Lambda function
          if ! aws lambda get-function --function-name "$FUNCTION_NAME" --region "$REGION" > /dev/null 2>&1; then
            echo "Creating Lambda function $FUNCTION_NAME..."
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --runtime python3.11 \
              --role arn:aws:iam::356838091771:role/service-role/first-lambda-function-role-e499l5dx \
              --handler app.lambda_handler \
              --timeout 300 \
              --zip-file fileb://lambda.zip \
              --region "$REGION" \
              --environment file://env_vars.json
          else
            echo "Updating Lambda function $FUNCTION_NAME..."
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --region "$REGION" \
              --zip-file fileb://lambda.zip

            echo "Updating function configuration..."
            aws lambda update-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --region "$REGION" \
              --environment file://env_vars.json
          fi
